# to open the csv
import pandas as pd
import numpy as np
import string
import glob
import json
import requests

df_data_1 = pd.read_csv (r'truncated working file 2017.csv')

df_data_1.dtypes

# drop remaining_lease missing values
df_data_1 = df_data_1.dropna()
df_data_1.isnull().sum()

# to be iterated in order to retrieve the geo-location of each address
df_data_1['address'] = df_data_1['block'] + " " + df_data_1['street_name']
address_list = df_data_1['address'].unique()

# to calculate the lease remain years for 2021
df_data_1['lease_remain_years_in2021'] = 99 - (2021 - df_data_1['lease_commence_date'])

# to rename column for remaining lease
df_data_1.rename(columns={'remaining_lease': 'remaining_lease_at_transac_year'}, inplace=True)

# to the median is applied to map each HDB flatâ€™s floor level
import statistics
def get_median(x):
    split_list = x.split(' TO ')
    float_list = [float(i) for i in split_list]
    median = statistics.median(float_list)
    return median
df_data_1['storey_median'] = df_data_1['storey_range'].apply(lambda x: get_median(x))

# to prepare the calculate for the distance to MRT from the flat

df_data_2 = pd.read_csv (r'ALL_MRT_geocode.csv')

# to generate the geocode for the flats

latitude = []
longitude = []
blk_no = []
road_name = []
postal_code = []
address = []
count = 0

for row in range(len(address_list)): 
    query_address = address_list[row]
    query_string='https://developers.onemap.sg/commonapi/search?searchVal='+str(query_address)+'&returnGeom=Y&getAddrDetails=Y'
    resp = requests.get(query_string)          

     
    data_geo_location=json.loads(resp.content)
    if data_geo_location['found'] != 0:
        latitude.append(data_geo_location['results'][0]['LATITUDE'])
        longitude.append(data_geo_location['results'][0]['LONGITUDE'])
        blk_no.append(data_geo_location['results'][0]['BLK_NO'])
        road_name.append(data_geo_location['results'][0]['ROAD_NAME'])
        postal_code.append(data_geo_location['results'][0]['POSTAL'])
        address.append(query_address)
        print (str(query_address) + " ,Lat: " + data_geo_location['results'][0]['LATITUDE'] + " Long: " + data_geo_location['results'][0]['LONGITUDE'])
    else:
        print ("No Results")


df_data_1_coordinates = pd.DataFrame({
    'latitude': latitude,
    'longitude': longitude,
    'blk_no': blk_no,
    'road_name': road_name,
    'postal_code': postal_code,
    'address': address
})
len(df_data_1_coordinates)

df_data_1['Latitude'] = df_data_1_coordinates['latitude']
df_data_1['Longitude'] = df_data_1_coordinates['longitude']

list_of_lat = df_data_1_coordinates['latitude']
list_of_long = df_data_1_coordinates['longitude']
mrt_lat = df_data_2['latitude']
mrt_long = df_data_2['longitude']
mrt_name = df_data_2['MRT']

list_of_coordinates = []
list_of_mrt_coordinates = []
list_of_mrt_name = []

for lat, long in zip(list_of_lat, list_of_long):
    list_of_coordinates.append((lat,long))
for lat, long in zip(mrt_lat, mrt_long):
    list_of_mrt_coordinates.append((lat, long))
for name in zip(mrt_name):
    list_of_mrt_name.append(name)

# Distance to nearest MRT
from geopy.distance import geodesic

list_of_dist_mrt = []
min_dist_mrt = []


for origin in list_of_coordinates:
    for destination in range(0, len(list_of_mrt_coordinates)):
        list_of_dist_mrt.append(geodesic(origin,list_of_mrt_coordinates[destination]).meters)
    shortest = (min(list_of_dist_mrt))
    min_dist_mrt.append(shortest)
    list_of_dist_mrt.clear()

# Distance from CDB
cbd_dist = []

for origin in list_of_coordinates:
    cbd_dist.append(geodesic(origin,(1.2830, 103.8513)).meters) #CBD coordinates

    # Distance from JH's parent's flat
parent_flat_dist = []

for origin in list_of_coordinates:
    parent_flat_dist.append(geodesic(origin,(1.374010, 103.893980)).meters) #JH's parent's flat coordinates
    
        
# Put MRT, CBD and Parent's flat distance together
df_data_1_coordinates['min_dist_mrt'] = min_dist_mrt
df_data_1_coordinates['cbd_dist'] = cbd_dist
df_data_1_coordinates['parent_flat_dist'] = parent_flat_dist

df_data_1['min_dist_mrt'] = df_data_1_coordinates['min_dist_mrt']
df_data_1['cbd_dist'] = df_data_1_coordinates['cbd_dist']
df_data_1['parent_flat_dist'] = df_data_1_coordinates['parent_flat_dist']

display(df_data_1)

df_data_1.dtypes

df_data_1['resale_price'] = df_data_1['resale_price'].astype('float')
df_data_1['floor_area_sqm'] = df_data_1['floor_area_sqm'].astype('float')
df_data_1['lease_commence_date'] = df_data_1['lease_commence_date'].astype('int64')
 

df_data_1.dropna(inplace=True)

df_data_1.dtypes

df_data_1.to_csv('Working_file.csv', index=False)
